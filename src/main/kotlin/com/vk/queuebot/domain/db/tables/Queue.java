/*
 * This file is generated by jOOQ.
*/
package com.vk.queuebot.domain.db.tables;


import com.vk.queuebot.domain.db.Indexes;
import com.vk.queuebot.domain.db.Keys;
import com.vk.queuebot.domain.db.Public;
import com.vk.queuebot.domain.db.tables.records.QueueRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Queue extends TableImpl<QueueRecord> {

    private static final long serialVersionUID = -1734459870;

    /**
     * The reference instance of <code>PUBLIC.QUEUE</code>
     */
    public static final Queue QUEUE = new Queue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QueueRecord> getRecordType() {
        return QueueRecord.class;
    }

    /**
     * The column <code>PUBLIC.QUEUE.ID</code>.
     */
    public final TableField<QueueRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.QUEUE.NAME</code>.
     */
    public final TableField<QueueRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.QUEUE.FROM_ID</code>.
     */
    public final TableField<QueueRecord, Long> FROM_ID = createField("FROM_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.QUEUE.CREATED_TS</code>.
     */
    public final TableField<QueueRecord, Long> CREATED_TS = createField("CREATED_TS", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.QUEUE</code> table reference
     */
    public Queue() {
        this(DSL.name("QUEUE"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.QUEUE</code> table reference
     */
    public Queue(String alias) {
        this(DSL.name(alias), QUEUE);
    }

    /**
     * Create an aliased <code>PUBLIC.QUEUE</code> table reference
     */
    public Queue(Name alias) {
        this(alias, QUEUE);
    }

    private Queue(Name alias, Table<QueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private Queue(Name alias, Table<QueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QueueRecord, Integer> getIdentity() {
        return Keys.IDENTITY_QUEUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QueueRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QueueRecord>> getKeys() {
        return Arrays.<UniqueKey<QueueRecord>>asList(Keys.CONSTRAINT_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Queue as(String alias) {
        return new Queue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Queue as(Name alias) {
        return new Queue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Queue rename(String name) {
        return new Queue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Queue rename(Name name) {
        return new Queue(name, null);
    }
}
